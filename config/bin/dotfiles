#!/bin/bash

sudo apt update -y && sudo apt upgrade -y
cd ~/.dotfiles && git pull

if ! [ -x "$(command -v stow)" ]; then
    echo "stow is not installed. Installing now..."
    sudo apt install -y stow
    cd ~/.dotfiles && stow config --no-folding
else
    echo "stow is already installed."
fi


if ! [ -x "$(command -v ansible)" ]; then
  ssh-keygen -t rsa -f ~/.ssh/id_rsa -q -N ""
  sudo apt install ansible -y
fi

if ! [ -x "$(command -v wmctrl)" ]; then
    echo "wmctrl is not installed. Installing now..."
    sudo apt install -y wmctrl
else
    echo "wmctrl is already installed."
fi

if ! [ -x "$(command -v pavucontrol)" ]; then
    echo "pavucontrol is not installed. Installing now..."
    sudo apt install -y pavucontrol
else
    echo "pavucontrol is already installed."
fi
    
if ! [ -x "$(command -v pulseaudio)" ]; then
    echo "pulseaudio is not installed. Installing now..."
    sudo apt install -y pulseaudio
else
    echo "pulseaudio is already installed."
fi

if ! [ -x "$(command -v flameshot)" ]; then
    echo "flameshot is not installed. Installing now..."
    sudo apt install -y flameshot
else
    echo "flameshot is already installed."
fi

if ! [ -x "$(command -v curl)" ]; then
    echo "curl is not installed. Installing now..."
    sudo apt install -y curl
else
    echo "curl is already installed."
fi

if ! [ -x "$(command -v peek)" ]; then
    echo "peek is not installed. Installing now..."
    sudo apt install -y peek
else
    echo "peek is already installed."
fi

if ! [ -x "$(command -v zsh)" ]; then
    echo "zsh is not installed. Installing now..."
    sudo apt install -y zsh
else
    echo "zsh is already installed."
fi

if ! [ -x "$(command -v htop)" ]; then
    echo "htop is not installed. Installing now..."
    sudo apt install -y htop
else
    echo "htop is already installed."
fi

if ! [ -x "$(command -v jq)" ]; then
    echo "jq is not installed. Installing now..."
    sudo apt install -y jq
else
    echo "jq is already installed."
fi

if ! [ -x "$(command -v xclip)" ]; then
    echo "xclip is not installed. Installing now..."
    sudo apt install -y xclip
else
    echo "xclip is already installed."
fi

if ! [ -x "$(command -v python3)" ]; then
    echo "python3 is not installed. Installing now..."
    sudo apt install -y python3
else
    echo "python3 is already installed."
fi

if ! [ -x "$(command -v eza)" ]; then
    echo "eza is not installed. Installing now..."
    sudo apt install -y eza
else
    echo "eza is already installed."
fi

if ! [ -x "$(command -v bat)" ]; then
    echo "bat is not installed. Installing now..."
    sudo apt install -y bat
else
    echo "bat is already installed."
fi

if ! [ -x "$(command -v pip3)" ]; then
    echo "python3-pip is not installed. Installing now..."
    sudo apt install -y python3-pip
else
    echo "python3-pip is already installed."
fi

if ! [ -x "$(command -v gh)" ]; then
    echo "gh is not installed. Installing now..."
    sudo apt install -y gh
else
    echo "gh is already installed."
fi

if ! [ -x "$(command -v rofi)" ]; then
    echo "rofi is not installed. Installing now..."
    sudo apt install -y rofi
else
    echo "rofi is already installed."
fi

if ! [ -x "$(command -v just)" ]; then
    echo "just is not installed. Installing now..."
    sudo apt install -y just
else
    echo "just is already installed."
fi

if ! [ -x "$(command -v gettext)" ]; then
    echo "gettext is not installed. Installing now..."
    sudo apt install -y gettext
else
    echo "gettext is already installed."
fi

if ! [ -x "$(command -v flatpak)" ]; then
    echo "flatpak is not installed. Installing now..."
    sudo apt install -y flatpak
else
    echo "flatpak is already installed."
fi

if ! [ -x "$(command -v go)" ]; then
    echo "golang-go is not installed. Installing now..."
    sudo add-apt-repository ppa:longsleep/golang-backports
    sudo apt update
    sudo apt install -y golang-go
else
    echo "golang-go is already installed."
fi

if ! [ -x "$(command -v google-chrome)" ]; then
    echo "google-chrome-stable is not installed. Installing now..."
    wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub > linux_signing_key.pub
    sudo install -D -o root -g root -m 644 linux_signing_key.pub /etc/apt/keyrings/linux_signing_key.pub
    sudo sh -c 'echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/linux_signing_key.pub] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list'
    sudo apt update
    sudo apt install -y google-chrome-stable
else
    echo "google-chrome-stable is already installed."
fi

if ! [ -x "$(command -v code)" ]; then
    echo "code is not installed. Installing now..."
    sudo apt install software-properties-common apt-transport-https wget -y
    wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -
    sudo add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
    sudo apt update
    sudo apt install -y code
else
    echo "code is already installed."
fi



cd ~/.dotfiles/rounded-window-corners && just install

flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
flatpak install flathub com.adamcake.Bolt
flatpak install flathub com.stremio.Stremio
flatpak install flathub com.slack.Slack
flatpak install flathub com.github.IsmaelMartinez.teams_for_linux
flatpak update -y

go install github.com/jesseduffield/lazygit@latest
go install github.com/charmbracelet/gum@latest
go install github.com/equinor/radix-cli/cli/rx@latest
go install github.com/FredrikMWold/radix-tui@latest
go install github.com/yorukot/superfile@latest

sudo ANSIBLE_ASK_VAULT_PASS=True ansible-playbook ~/.dotfiles/local.yml 

if [[ "$SHELL" != *zsh ]]; then
  chsh -s $(which zsh) 
fi   

PROFILE=/dev/null bash -c 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash'
curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh
~/.dotfiles/fzf/install --all
curl --proto '=https' --tlsv1.2 -LsSf https://setup.atuin.sh | sh


# Clean up
fc-cache -f -v
cd ~/.dotfiles && git remote set-url origin git@github.com:FredrikMWold/.dotfiles.git
cd ~/.dotfiles && stow config --no-folding

gnome-extensions enable hidetopbar@mathieu.bidon.ca
gnome-extensions enable tiling-assistant@ubuntu.com
gnome-extensions enable ubuntu-dock@ubuntu.com
gnome-extensions enable rounded-window-corners@fxgn

dconf load / < ~/.dotfiles/gnome-settings-backup.dconf

systemctl --user daemon-reload
systemctl --user enable polybar.service